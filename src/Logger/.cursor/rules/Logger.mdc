---
description: 
globs: 
alwaysApply: true
---
$meta:
  name: 'loggerModule'
  goal: 'independentErrorWarningCollection'
  domain: 'logging.error.collection'
  apply: 'loggerModule'
  version: 1.0
  purpose: "Define Logger module responsibility as independent error and warning collection utility"
  domains: ['logging.error.collection', 'utility.standalone.service', 'data.aggregation.frequency']

module:
  purpose: "Independent error and warning collection with automatic grouping and frequency analysis"
  
  responsibility:
    primary: "Collect, group, and prioritize errors and warnings by frequency"
    scope: "Standalone utility for any application requiring error aggregation"
    independence: "No external dependencies - works as isolated utility"
    
  publicAPI:
    constructor: "new Logger<TError, TWarning>(opts?: Logger.Opts)"
    methods:
      addError: "addError(error: Logger.Error): void - Add error with automatic grouping"
      addWarning: "addWarning(warning: Logger.Warning): void - Add warning with automatic grouping"
      getResponse: "getResponse(): Logger.Response - Get top 10 prioritized errors and warnings"
    
    types:
      Error: "{ message: string; code: string; context?: unknown }"
      Warning: "{ message: string; code: string; context?: unknown }"
      Response: "{ errors: ErrorResponse[]; warnings: WarningResponse[] }"
      
  behavior:
    grouping: "Automatically groups similar errors/warnings by code and message"
    contextTracking: "Maintains frequency count for each unique context"
    prioritization: "Returns most frequent issues first (top 10)"
    deduplication: "Eliminates duplicate entries while preserving context variations"
    
  workflows:
    errorCollection:
      - "Receive error with code, message, and optional context"
      - "Find or create error group by code"
      - "Find or create error entry by message within group"
      - "Add or increment context frequency"
      - "Update group total frequency"
      
    responseGeneration:
      - "Aggregate all errors across groups"
      - "Sort by frequency (highest first)"
      - "Extract top 10 most frequent contexts per error"
      - "Return prioritized error and warning arrays"
      
  dependencies:
    external: []
    internal: []
    note: "Completely independent module with no dependencies"
    
  integration:
    usage: "Can be used standalone or integrated with any error handling system"
    compatibility: "Works with any TypeScript/JavaScript application"
    flexibility: "Generic types allow custom error and warning structures"
