---
description: 
globs: 
alwaysApply: false
---
```yaml
$meta:
  name: 'mcpBuilderModule'
  goal: 'mcpToolBuildingAndValidation'
  domain: 'mcp.tool.building'
  apply: 'mcpBuilderModule'
  version: 1.0
  purpose: "Define McpBuilder module responsibility for MCP tool creation with automatic validation"
  domains: ['mcp.tool.building', 'schema.validation.extension', 'project.path.management']

module:
  purpose: "Build and register MCP tools with automatic schema validation and project path injection"
  
  responsibility:
    primary: "Create MCP tools with enhanced schema validation and project parameter management"
    scope: "MCP tool registration, schema extension, and validation"
    enhancement: "Automatically adds and validates project parameter for all tools"
    
  publicAPI:
    constructor: "new McpBuilder(opts?: McpBuilder.Opts)"
    methods:
      addTool: "addTool(tool: Tool, handler: ToolHandler): McpBuilder.Response<void>"
      getResponse: "getResponse<TData>(data: TData): McpBuilder.Response<TData>"
    
    types:
      Tool: "MCP tool definition with name, description, inputSchema"
      ToolHandler: "async (request: CallToolRequest) => Promise<CallToolResult>"
      Response: "SuccessResponse<TData> | ErrorResponse<TData> with errors/warnings"
      
  behavior:
    schemaExtension: "Extends user's tool schema with required project parameter"
    pathValidation: "Validates project paths are absolute (Unix/Windows compatible)"
    toolValidation: "Validates tool name, description, and schema structure"
    errorCollection: "Collects validation errors through integrated Logger"
    handlerEnhancement: "Wraps user handlers with project parameter validation"
    
  workflows:
    toolRegistration:
      - "Validate tool definition (name, description, schema)"
      - "Check for duplicate tool names"
      - "Extend schema with project parameter requirements"
      - "Create enhanced handler with project validation"
      - "Register tool with extended schema and enhanced handler"
      - "Return success/error response with collected issues"
      
    schemaExtension:
      - "Take user's original inputSchema"
      - "Add project parameter as required string field"
      - "Merge user's properties with project property"
      - "Combine required arrays (project + user requirements)"
      - "Preserve additionalProperties setting"
      
    handlerValidation:
      - "Extract arguments from request parameters"
      - "Validate project parameter exists and is string"
      - "Validate project path is absolute"
      - "Call original handler with validated arguments"
      - "Handle and re-throw validation errors"
      
  dependencies:
    external: ['@modelcontextprotocol/sdk']
    internal: ['Logger']
    relationship: "Uses Logger for error collection, independent of other modules"
    
  integration:
    usage: "Primary module for building MCP tools with enhanced validation"
    compatibility: "Works with standard MCP protocol and tooling"
    extensibility: "Handlers can focus on business logic while validation is handled automatically"
